import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import cors from 'cors';
import twilio from 'twilio';
import multer from 'multer';
import path from 'path';

dotenv.config();
const app = express();
app.use(express.json());
app.use(cors());

const twilioClient = twilio(process.env.TWILIO_SID, process.env.TWILIO_AUTH_TOKEN);

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('MongoDB Connected'))
  .catch(err => console.log(err));

const storage = multer.diskStorage({
  destination: './uploads/',
  filename: (req, file, cb) => {
    cb(null, `${req.user.id}_${Date.now()}${path.extname(file.originalname)}`);
  }
});

const upload = multer({ storage });

const UserSchema = new mongoose.Schema({
  username: String,
  email: String,
  password: String,
  phone: String,
  governmentID: String,
  isVerified: { type: Boolean, default: false },
  phoneVerified: { type: Boolean, default: false },
  verificationCode: String,
  balance: { type: Number, default: 0 },
  isVIP: { type: Boolean, default: false },
  uploadedDocuments: [{ type: String }],
});

const ListingSchema = new mongoose.Schema({
  title: String,
  description: String,
  category: String,
  price: Number,
  owner: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  isSold: { type: Boolean, default: false },
  buyer: { type: mongoose.Schema.Types.ObjectId, ref: 'User', default: null },
});

const User = mongoose.model('User', UserSchema);
const Listing = mongoose.model('Listing', ListingSchema);

const verifyToken = (req, res, next) => {
  const token = req.header('Authorization');
  if (!token) return res.status(401).json({ error: 'Access denied' });
  try {
    const verified = jwt.verify(token, process.env.JWT_SECRET);
    req.user = verified;
    next();
  } catch (error) {
    res.status(400).json({ error: 'Invalid token' });
  }
};

app.post('/upload-documents', verifyToken, upload.array('documents', 3), async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ error: 'User not found' });

    if (!user.isVIP) return res.status(403).json({ error: 'Only VIP users can upload documents' });

    user.uploadedDocuments = req.files.map(file => file.path);
    await user.save();
    res.json({ message: 'Documents uploaded successfully', documents: user.uploadedDocuments });
  } catch (error) {
    res.status(500).json({ error: 'Document upload failed' });
  }
});

app.post('/register', async (req, res) => {
  const { username, email, password, phone, governmentID, isVIP } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
  try {
    const newUser = new User({ username, email, password: hashedPassword, phone, governmentID, verificationCode, isVIP });
    await newUser.save();
    
    await twilioClient.messages.create({
      body: `Your verification code is: ${verificationCode}`,
      from: process.env.TWILIO_PHONE_NUMBER,
      to: phone
    });
    
    res.status(201).json({ message: 'User registered, verification code sent', userId: newUser._id });
  } catch (error) {
    res.status(500).json({ error: 'Registration failed' });
  }
});

app.listen(5000, () => console.log('Server running on port 5000'));
